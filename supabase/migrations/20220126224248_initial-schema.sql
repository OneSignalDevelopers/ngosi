-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.profiles
(
    id uuid NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    username text COLLATE pg_catalog."default",
    avatar_url text COLLATE pg_catalog."default",
    website text COLLATE pg_catalog."default",
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT "profiles_userId_fkey" FOREIGN KEY (id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT profiles_username_check CHECK (char_length(username) >= 3)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.profiles
    OWNER to postgres;

GRANT ALL ON TABLE public.profiles TO anon;

GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO postgres;

GRANT ALL ON TABLE public.profiles TO service_role;

CREATE TABLE IF NOT EXISTS public."Preso"
(
    id text COLLATE pg_catalog."default" NOT NULL,
    "eventName" text COLLATE pg_catalog."default" NOT NULL,
    "eventLocation" text COLLATE pg_catalog."default",
    title text COLLATE pg_catalog."default" NOT NULL,
    url text COLLATE pg_catalog."default",
    "shortCode" text COLLATE pg_catalog."default",
    "userId" uuid NOT NULL,
    "createdAt" timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "publishedContentUrl" text COLLATE pg_catalog."default",
    CONSTRAINT "Preso_pkey" PRIMARY KEY (id),
    CONSTRAINT "Preso_userId_fkey" FOREIGN KEY ("userId")
        REFERENCES public.profiles (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Preso"
    OWNER to postgres;

GRANT ALL ON TABLE public."Preso" TO anon;

GRANT ALL ON TABLE public."Preso" TO authenticated;

GRANT ALL ON TABLE public."Preso" TO postgres;

GRANT ALL ON TABLE public."Preso" TO service_role;

CREATE TABLE IF NOT EXISTS public."Attendee"
(
    id text COLLATE pg_catalog."default" NOT NULL,
    "fullName" text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    "createdAt" timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "Attendee_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Attendee"
    OWNER to postgres;

GRANT ALL ON TABLE public."Attendee" TO anon;

GRANT ALL ON TABLE public."Attendee" TO authenticated;

GRANT ALL ON TABLE public."Attendee" TO postgres;

GRANT ALL ON TABLE public."Attendee" TO service_role;
CREATE UNIQUE INDEX IF NOT EXISTS "Attendee_email_key"
    ON public."Attendee" USING btree
    (email COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;

CREATE TABLE IF NOT EXISTS public."Survey"
(
    id text COLLATE pg_catalog."default" NOT NULL,
    "presoId" text COLLATE pg_catalog."default" NOT NULL,
    "attendeeId" text COLLATE pg_catalog."default" NOT NULL,
    "notifyWhenVideoPublished" boolean NOT NULL,
    "sendPresoFeedback" boolean NOT NULL,
    "notifyOfOtherTalks" boolean NOT NULL,
    "createdAt" timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "Survey_pkey" PRIMARY KEY (id),
    CONSTRAINT "Survey_attendeeId_fkey" FOREIGN KEY ("attendeeId")
        REFERENCES public."Attendee" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT "Survey_presoId_fkey" FOREIGN KEY ("presoId")
        REFERENCES public."Preso" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Survey"
    OWNER to postgres;

GRANT ALL ON TABLE public."Survey" TO anon;

GRANT ALL ON TABLE public."Survey" TO authenticated;

GRANT ALL ON TABLE public."Survey" TO postgres;

GRANT ALL ON TABLE public."Survey" TO service_role;
CREATE OR REPLACE VIEW public.attendees_view
 AS
 SELECT p."userId" AS presenter,
    p.id AS preso,
    a.id AS attendee,
    a.email,
    a."fullName" AS name,
    a."createdAt" AS created_at,
    s."notifyOfOtherTalks",
    s."notifyWhenVideoPublished",
    s."sendPresoFeedback"
   FROM "Preso" p
     JOIN "Survey" s ON p.id = s."presoId"
     JOIN "Attendee" a ON s."attendeeId" = a.id;

ALTER TABLE public.attendees_view
    OWNER TO postgres;

GRANT ALL ON TABLE public.attendees_view TO authenticated;
GRANT ALL ON TABLE public.attendees_view TO postgres;
GRANT ALL ON TABLE public.attendees_view TO anon;
GRANT ALL ON TABLE public.attendees_view TO service_role;
